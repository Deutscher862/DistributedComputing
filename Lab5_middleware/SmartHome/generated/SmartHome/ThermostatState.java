//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `devices.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SmartHome;

public class ThermostatState implements java.lang.Cloneable,
                                        java.io.Serializable
{
    public Temperature temperature;

    public AirMoisture airMisture;

    public boolean turnedOn;

    public ThermostatState()
    {
        this.temperature = new Temperature();
        this.airMisture = new AirMoisture();
    }

    public ThermostatState(Temperature temperature, AirMoisture airMisture, boolean turnedOn)
    {
        this.temperature = temperature;
        this.airMisture = airMisture;
        this.turnedOn = turnedOn;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ThermostatState r = null;
        if(rhs instanceof ThermostatState)
        {
            r = (ThermostatState)rhs;
        }

        if(r != null)
        {
            if(this.temperature != r.temperature)
            {
                if(this.temperature == null || r.temperature == null || !this.temperature.equals(r.temperature))
                {
                    return false;
                }
            }
            if(this.airMisture != r.airMisture)
            {
                if(this.airMisture == null || r.airMisture == null || !this.airMisture.equals(r.airMisture))
                {
                    return false;
                }
            }
            if(this.turnedOn != r.turnedOn)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::SmartHome::ThermostatState");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, temperature);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, airMisture);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, turnedOn);
        return h_;
    }

    public ThermostatState clone()
    {
        ThermostatState c = null;
        try
        {
            c = (ThermostatState)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        Temperature.ice_write(ostr, this.temperature);
        AirMoisture.ice_write(ostr, this.airMisture);
        ostr.writeBool(this.turnedOn);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.temperature = Temperature.ice_read(istr);
        this.airMisture = AirMoisture.ice_read(istr);
        this.turnedOn = istr.readBool();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, ThermostatState v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public ThermostatState ice_read(com.zeroc.Ice.InputStream istr)
    {
        ThermostatState v = new ThermostatState();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<ThermostatState> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, ThermostatState v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(9);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<ThermostatState> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(ThermostatState.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final ThermostatState _nullMarshalValue = new ThermostatState();

    /** @hidden */
    public static final long serialVersionUID = 1233344060L;
}
