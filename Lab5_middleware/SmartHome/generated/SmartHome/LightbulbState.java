//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `devices.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SmartHome;

public class LightBulbState implements java.lang.Cloneable,
                                       java.io.Serializable
{
    public Color color;

    public boolean tunredOn;

    public LightBulbState()
    {
        this.color = Color.White;
    }

    public LightBulbState(Color color, boolean tunredOn)
    {
        this.color = color;
        this.tunredOn = tunredOn;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LightBulbState r = null;
        if(rhs instanceof LightBulbState)
        {
            r = (LightBulbState)rhs;
        }

        if(r != null)
        {
            if(this.color != r.color)
            {
                if(this.color == null || r.color == null || !this.color.equals(r.color))
                {
                    return false;
                }
            }
            if(this.tunredOn != r.tunredOn)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::SmartHome::LightBulbState");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, color);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, tunredOn);
        return h_;
    }

    public LightBulbState clone()
    {
        LightBulbState c = null;
        try
        {
            c = (LightBulbState)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        Color.ice_write(ostr, this.color);
        ostr.writeBool(this.tunredOn);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.color = Color.ice_read(istr);
        this.tunredOn = istr.readBool();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LightBulbState v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LightBulbState ice_read(com.zeroc.Ice.InputStream istr)
    {
        LightBulbState v = new LightBulbState();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LightBulbState> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LightBulbState v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<LightBulbState> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(LightBulbState.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LightBulbState _nullMarshalValue = new LightBulbState();

    /** @hidden */
    public static final long serialVersionUID = 2041680173L;
}
