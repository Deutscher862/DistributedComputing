# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `devices.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'Color' not in _M_SmartHome.__dict__:
    _M_SmartHome.Color = Ice.createTempClass()
    class Color(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Color.White = Color("White", 0)
    Color.Red = Color("Red", 1)
    Color.Green = Color("Green", 2)
    Color.Blue = Color("Blue", 3)
    Color._enumerators = { 0:Color.White, 1:Color.Red, 2:Color.Green, 3:Color.Blue }

    _M_SmartHome._t_Color = IcePy.defineEnum('::SmartHome::Color', Color, (), Color._enumerators)

    _M_SmartHome.Color = Color
    del Color

if 'DeviceInfo' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceInfo = Ice.createTempClass()
    class DeviceInfo(object):
        def __init__(self, id=0, name=''):
            self.id = id
            self.name = name

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.name)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.DeviceInfo):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceInfo)

        __repr__ = __str__

    _M_SmartHome._t_DeviceInfo = IcePy.defineStruct('::SmartHome::DeviceInfo', DeviceInfo, (), (
        ('id', (), IcePy._t_int),
        ('name', (), IcePy._t_string)
    ))

    _M_SmartHome.DeviceInfo = DeviceInfo
    del DeviceInfo

if 'LightBulbState' not in _M_SmartHome.__dict__:
    _M_SmartHome.LightBulbState = Ice.createTempClass()
    class LightBulbState(object):
        def __init__(self, color=_M_SmartHome.Color.White, tunredOn=False):
            self.color = color
            self.tunredOn = tunredOn

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.color)
            _h = 5 * _h + Ice.getHash(self.tunredOn)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.LightBulbState):
                return NotImplemented
            else:
                if self.color is None or other.color is None:
                    if self.color != other.color:
                        return (-1 if self.color is None else 1)
                else:
                    if self.color < other.color:
                        return -1
                    elif self.color > other.color:
                        return 1
                if self.tunredOn is None or other.tunredOn is None:
                    if self.tunredOn != other.tunredOn:
                        return (-1 if self.tunredOn is None else 1)
                else:
                    if self.tunredOn < other.tunredOn:
                        return -1
                    elif self.tunredOn > other.tunredOn:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LightBulbState)

        __repr__ = __str__

    _M_SmartHome._t_LightBulbState = IcePy.defineStruct('::SmartHome::LightBulbState', LightBulbState, (), (
        ('color', (), _M_SmartHome._t_Color),
        ('tunredOn', (), IcePy._t_bool)
    ))

    _M_SmartHome.LightBulbState = LightBulbState
    del LightBulbState

if 'Time' not in _M_SmartHome.__dict__:
    _M_SmartHome.Time = Ice.createTempClass()
    class Time(object):
        def __init__(self, hours=0, minutes=0):
            self.hours = hours
            self.minutes = minutes

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.hours)
            _h = 5 * _h + Ice.getHash(self.minutes)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.Time):
                return NotImplemented
            else:
                if self.hours is None or other.hours is None:
                    if self.hours != other.hours:
                        return (-1 if self.hours is None else 1)
                else:
                    if self.hours < other.hours:
                        return -1
                    elif self.hours > other.hours:
                        return 1
                if self.minutes is None or other.minutes is None:
                    if self.minutes != other.minutes:
                        return (-1 if self.minutes is None else 1)
                else:
                    if self.minutes < other.minutes:
                        return -1
                    elif self.minutes > other.minutes:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Time)

        __repr__ = __str__

    _M_SmartHome._t_Time = IcePy.defineStruct('::SmartHome::Time', Time, (), (
        ('hours', (), IcePy._t_int),
        ('minutes', (), IcePy._t_int)
    ))

    _M_SmartHome.Time = Time
    del Time

if 'NightMode' not in _M_SmartHome.__dict__:
    _M_SmartHome.NightMode = Ice.createTempClass()
    class NightMode(object):
        def __init__(self, nightModeEnabled=False):
            self.nightModeEnabled = nightModeEnabled

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.nightModeEnabled)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.NightMode):
                return NotImplemented
            else:
                if self.nightModeEnabled is None or other.nightModeEnabled is None:
                    if self.nightModeEnabled != other.nightModeEnabled:
                        return (-1 if self.nightModeEnabled is None else 1)
                else:
                    if self.nightModeEnabled < other.nightModeEnabled:
                        return -1
                    elif self.nightModeEnabled > other.nightModeEnabled:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_NightMode)

        __repr__ = __str__

    _M_SmartHome._t_NightMode = IcePy.defineStruct('::SmartHome::NightMode', NightMode, (), (('nightModeEnabled', (), IcePy._t_bool),))

    _M_SmartHome.NightMode = NightMode
    del NightMode

if 'DeviceTurnedOffError' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceTurnedOffError = Ice.createTempClass()
    class DeviceTurnedOffError(Ice.UserException):
        def __init__(self, errorMessage=''):
            self.errorMessage = errorMessage

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DeviceTurnedOffError'

    _M_SmartHome._t_DeviceTurnedOffError = IcePy.defineException('::SmartHome::DeviceTurnedOffError', DeviceTurnedOffError, (), False, None, (('errorMessage', (), IcePy._t_string, False, 0),))
    DeviceTurnedOffError._ice_type = _M_SmartHome._t_DeviceTurnedOffError

    _M_SmartHome.DeviceTurnedOffError = DeviceTurnedOffError
    del DeviceTurnedOffError

if 'InvalidColorError' not in _M_SmartHome.__dict__:
    _M_SmartHome.InvalidColorError = Ice.createTempClass()
    class InvalidColorError(Ice.UserException):
        def __init__(self, errorMessage=''):
            self.errorMessage = errorMessage

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::InvalidColorError'

    _M_SmartHome._t_InvalidColorError = IcePy.defineException('::SmartHome::InvalidColorError', InvalidColorError, (), False, None, (('errorMessage', (), IcePy._t_string, False, 0),))
    InvalidColorError._ice_type = _M_SmartHome._t_InvalidColorError

    _M_SmartHome.InvalidColorError = InvalidColorError
    del InvalidColorError

_M_SmartHome._t_LightBulb = IcePy.defineValue('::SmartHome::LightBulb', Ice.Value, -1, (), False, True, None, ())

if 'LightBulbPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.LightBulbPrx = Ice.createTempClass()
    class LightBulbPrx(Ice.ObjectPrx):

        def getDeviceInfo(self, context=None):
            return _M_SmartHome.LightBulb._op_getDeviceInfo.invoke(self, ((), context))

        def getDeviceInfoAsync(self, context=None):
            return _M_SmartHome.LightBulb._op_getDeviceInfo.invokeAsync(self, ((), context))

        def begin_getDeviceInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.LightBulb._op_getDeviceInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getDeviceInfo(self, _r):
            return _M_SmartHome.LightBulb._op_getDeviceInfo.end(self, _r)

        def getLightBulbState(self, context=None):
            return _M_SmartHome.LightBulb._op_getLightBulbState.invoke(self, ((), context))

        def getLightBulbStateAsync(self, context=None):
            return _M_SmartHome.LightBulb._op_getLightBulbState.invokeAsync(self, ((), context))

        def begin_getLightBulbState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.LightBulb._op_getLightBulbState.begin(self, ((), _response, _ex, _sent, context))

        def end_getLightBulbState(self, _r):
            return _M_SmartHome.LightBulb._op_getLightBulbState.end(self, _r)

        def getColor(self, context=None):
            return _M_SmartHome.LightBulb._op_getColor.invoke(self, ((), context))

        def getColorAsync(self, context=None):
            return _M_SmartHome.LightBulb._op_getColor.invokeAsync(self, ((), context))

        def begin_getColor(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.LightBulb._op_getColor.begin(self, ((), _response, _ex, _sent, context))

        def end_getColor(self, _r):
            return _M_SmartHome.LightBulb._op_getColor.end(self, _r)

        def setColor(self, newColor, context=None):
            return _M_SmartHome.LightBulb._op_setColor.invoke(self, ((newColor, ), context))

        def setColorAsync(self, newColor, context=None):
            return _M_SmartHome.LightBulb._op_setColor.invokeAsync(self, ((newColor, ), context))

        def begin_setColor(self, newColor, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.LightBulb._op_setColor.begin(self, ((newColor, ), _response, _ex, _sent, context))

        def end_setColor(self, _r):
            return _M_SmartHome.LightBulb._op_setColor.end(self, _r)

        def turnOn(self, context=None):
            return _M_SmartHome.LightBulb._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_SmartHome.LightBulb._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.LightBulb._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_SmartHome.LightBulb._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_SmartHome.LightBulb._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_SmartHome.LightBulb._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.LightBulb._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_SmartHome.LightBulb._op_turnOff.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.LightBulbPrx.ice_checkedCast(proxy, '::SmartHome::LightBulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.LightBulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LightBulb'
    _M_SmartHome._t_LightBulbPrx = IcePy.defineProxy('::SmartHome::LightBulb', LightBulbPrx)

    _M_SmartHome.LightBulbPrx = LightBulbPrx
    del LightBulbPrx

    _M_SmartHome.LightBulb = Ice.createTempClass()
    class LightBulb(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::LightBulb')

        def ice_id(self, current=None):
            return '::SmartHome::LightBulb'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LightBulb'

        def getDeviceInfo(self, current=None):
            raise NotImplementedError("servant method 'getDeviceInfo' not implemented")

        def getLightBulbState(self, current=None):
            raise NotImplementedError("servant method 'getLightBulbState' not implemented")

        def getColor(self, current=None):
            raise NotImplementedError("servant method 'getColor' not implemented")

        def setColor(self, newColor, current=None):
            raise NotImplementedError("servant method 'setColor' not implemented")

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LightBulbDisp)

        __repr__ = __str__

    _M_SmartHome._t_LightBulbDisp = IcePy.defineClass('::SmartHome::LightBulb', LightBulb, (), None, ())
    LightBulb._ice_type = _M_SmartHome._t_LightBulbDisp

    LightBulb._op_getDeviceInfo = IcePy.Operation('getDeviceInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_DeviceInfo, False, 0), ())
    LightBulb._op_getLightBulbState = IcePy.Operation('getLightBulbState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_LightBulbState, False, 0), ())
    LightBulb._op_getColor = IcePy.Operation('getColor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_Color, False, 0), (_M_SmartHome._t_DeviceTurnedOffError,))
    LightBulb._op_setColor = IcePy.Operation('setColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_Color, False, 0),), (), None, (_M_SmartHome._t_DeviceTurnedOffError, _M_SmartHome._t_InvalidColorError))
    LightBulb._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    LightBulb._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_SmartHome.LightBulb = LightBulb
    del LightBulb

_M_SmartHome._t_OutdoorLight = IcePy.defineValue('::SmartHome::OutdoorLight', Ice.Value, -1, (), False, True, None, ())

if 'OutdoorLightPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.OutdoorLightPrx = Ice.createTempClass()
    class OutdoorLightPrx(_M_SmartHome.LightBulbPrx):

        def setNightMode(self, nightModeEnabled, context=None):
            return _M_SmartHome.OutdoorLight._op_setNightMode.invoke(self, ((nightModeEnabled, ), context))

        def setNightModeAsync(self, nightModeEnabled, context=None):
            return _M_SmartHome.OutdoorLight._op_setNightMode.invokeAsync(self, ((nightModeEnabled, ), context))

        def begin_setNightMode(self, nightModeEnabled, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.OutdoorLight._op_setNightMode.begin(self, ((nightModeEnabled, ), _response, _ex, _sent, context))

        def end_setNightMode(self, _r):
            return _M_SmartHome.OutdoorLight._op_setNightMode.end(self, _r)

        def getNightMode(self, context=None):
            return _M_SmartHome.OutdoorLight._op_getNightMode.invoke(self, ((), context))

        def getNightModeAsync(self, context=None):
            return _M_SmartHome.OutdoorLight._op_getNightMode.invokeAsync(self, ((), context))

        def begin_getNightMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.OutdoorLight._op_getNightMode.begin(self, ((), _response, _ex, _sent, context))

        def end_getNightMode(self, _r):
            return _M_SmartHome.OutdoorLight._op_getNightMode.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.OutdoorLightPrx.ice_checkedCast(proxy, '::SmartHome::OutdoorLight', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.OutdoorLightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::OutdoorLight'
    _M_SmartHome._t_OutdoorLightPrx = IcePy.defineProxy('::SmartHome::OutdoorLight', OutdoorLightPrx)

    _M_SmartHome.OutdoorLightPrx = OutdoorLightPrx
    del OutdoorLightPrx

    _M_SmartHome.OutdoorLight = Ice.createTempClass()
    class OutdoorLight(_M_SmartHome.LightBulb):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::LightBulb', '::SmartHome::OutdoorLight')

        def ice_id(self, current=None):
            return '::SmartHome::OutdoorLight'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::OutdoorLight'

        def setNightMode(self, nightModeEnabled, current=None):
            raise NotImplementedError("servant method 'setNightMode' not implemented")

        def getNightMode(self, current=None):
            raise NotImplementedError("servant method 'getNightMode' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_OutdoorLightDisp)

        __repr__ = __str__

    _M_SmartHome._t_OutdoorLightDisp = IcePy.defineClass('::SmartHome::OutdoorLight', OutdoorLight, (), None, (_M_SmartHome._t_LightBulbDisp,))
    OutdoorLight._ice_type = _M_SmartHome._t_OutdoorLightDisp

    OutdoorLight._op_setNightMode = IcePy.Operation('setNightMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    OutdoorLight._op_getNightMode = IcePy.Operation('getNightMode', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_NightMode, False, 0), ())

    _M_SmartHome.OutdoorLight = OutdoorLight
    del OutdoorLight

_M_SmartHome._t_RoomLight = IcePy.defineValue('::SmartHome::RoomLight', Ice.Value, -1, (), False, True, None, ())

if 'RoomLightPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.RoomLightPrx = Ice.createTempClass()
    class RoomLightPrx(_M_SmartHome.LightBulbPrx):

        def setHours(self, hours, context=None):
            return _M_SmartHome.RoomLight._op_setHours.invoke(self, ((hours, ), context))

        def setHoursAsync(self, hours, context=None):
            return _M_SmartHome.RoomLight._op_setHours.invokeAsync(self, ((hours, ), context))

        def begin_setHours(self, hours, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RoomLight._op_setHours.begin(self, ((hours, ), _response, _ex, _sent, context))

        def end_setHours(self, _r):
            return _M_SmartHome.RoomLight._op_setHours.end(self, _r)

        def setMinutes(self, minutes, context=None):
            return _M_SmartHome.RoomLight._op_setMinutes.invoke(self, ((minutes, ), context))

        def setMinutesAsync(self, minutes, context=None):
            return _M_SmartHome.RoomLight._op_setMinutes.invokeAsync(self, ((minutes, ), context))

        def begin_setMinutes(self, minutes, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RoomLight._op_setMinutes.begin(self, ((minutes, ), _response, _ex, _sent, context))

        def end_setMinutes(self, _r):
            return _M_SmartHome.RoomLight._op_setMinutes.end(self, _r)

        def getAutoTurnOffTime(self, context=None):
            return _M_SmartHome.RoomLight._op_getAutoTurnOffTime.invoke(self, ((), context))

        def getAutoTurnOffTimeAsync(self, context=None):
            return _M_SmartHome.RoomLight._op_getAutoTurnOffTime.invokeAsync(self, ((), context))

        def begin_getAutoTurnOffTime(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RoomLight._op_getAutoTurnOffTime.begin(self, ((), _response, _ex, _sent, context))

        def end_getAutoTurnOffTime(self, _r):
            return _M_SmartHome.RoomLight._op_getAutoTurnOffTime.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.RoomLightPrx.ice_checkedCast(proxy, '::SmartHome::RoomLight', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.RoomLightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::RoomLight'
    _M_SmartHome._t_RoomLightPrx = IcePy.defineProxy('::SmartHome::RoomLight', RoomLightPrx)

    _M_SmartHome.RoomLightPrx = RoomLightPrx
    del RoomLightPrx

    _M_SmartHome.RoomLight = Ice.createTempClass()
    class RoomLight(_M_SmartHome.LightBulb):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::LightBulb', '::SmartHome::RoomLight')

        def ice_id(self, current=None):
            return '::SmartHome::RoomLight'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::RoomLight'

        def setHours(self, hours, current=None):
            raise NotImplementedError("servant method 'setHours' not implemented")

        def setMinutes(self, minutes, current=None):
            raise NotImplementedError("servant method 'setMinutes' not implemented")

        def getAutoTurnOffTime(self, current=None):
            raise NotImplementedError("servant method 'getAutoTurnOffTime' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_RoomLightDisp)

        __repr__ = __str__

    _M_SmartHome._t_RoomLightDisp = IcePy.defineClass('::SmartHome::RoomLight', RoomLight, (), None, (_M_SmartHome._t_LightBulbDisp,))
    RoomLight._ice_type = _M_SmartHome._t_RoomLightDisp

    RoomLight._op_setHours = IcePy.Operation('setHours', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    RoomLight._op_setMinutes = IcePy.Operation('setMinutes', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    RoomLight._op_getAutoTurnOffTime = IcePy.Operation('getAutoTurnOffTime', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_Time, False, 0), ())

    _M_SmartHome.RoomLight = RoomLight
    del RoomLight

if 'Temperature' not in _M_SmartHome.__dict__:
    _M_SmartHome.Temperature = Ice.createTempClass()
    class Temperature(object):
        def __init__(self, value=0.0):
            self.value = value

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.Temperature):
                return NotImplemented
            else:
                if self.value != other.value:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Temperature)

        __repr__ = __str__

    _M_SmartHome._t_Temperature = IcePy.defineStruct('::SmartHome::Temperature', Temperature, (), (('value', (), IcePy._t_float),))

    _M_SmartHome.Temperature = Temperature
    del Temperature

if 'AirMoisture' not in _M_SmartHome.__dict__:
    _M_SmartHome.AirMoisture = Ice.createTempClass()
    class AirMoisture(object):
        def __init__(self, value=0.0):
            self.value = value

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.AirMoisture):
                return NotImplemented
            else:
                if self.value != other.value:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_AirMoisture)

        __repr__ = __str__

    _M_SmartHome._t_AirMoisture = IcePy.defineStruct('::SmartHome::AirMoisture', AirMoisture, (), (('value', (), IcePy._t_float),))

    _M_SmartHome.AirMoisture = AirMoisture
    del AirMoisture

if 'ThermostatState' not in _M_SmartHome.__dict__:
    _M_SmartHome.ThermostatState = Ice.createTempClass()
    class ThermostatState(object):
        def __init__(self, temperature=Ice._struct_marker, airMisture=Ice._struct_marker, turnedOn=False):
            if temperature is Ice._struct_marker:
                self.temperature = _M_SmartHome.Temperature()
            else:
                self.temperature = temperature
            if airMisture is Ice._struct_marker:
                self.airMisture = _M_SmartHome.AirMoisture()
            else:
                self.airMisture = airMisture
            self.turnedOn = turnedOn

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.ThermostatState):
                return NotImplemented
            else:
                if self.temperature != other.temperature:
                    return False
                if self.airMisture != other.airMisture:
                    return False
                if self.turnedOn != other.turnedOn:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ThermostatState)

        __repr__ = __str__

    _M_SmartHome._t_ThermostatState = IcePy.defineStruct('::SmartHome::ThermostatState', ThermostatState, (), (
        ('temperature', (), _M_SmartHome._t_Temperature),
        ('airMisture', (), _M_SmartHome._t_AirMoisture),
        ('turnedOn', (), IcePy._t_bool)
    ))

    _M_SmartHome.ThermostatState = ThermostatState
    del ThermostatState

_M_SmartHome._t_Thermostat = IcePy.defineValue('::SmartHome::Thermostat', Ice.Value, -1, (), False, True, None, ())

if 'ThermostatPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.ThermostatPrx = Ice.createTempClass()
    class ThermostatPrx(Ice.ObjectPrx):

        def getDeviceInfo(self, context=None):
            return _M_SmartHome.Thermostat._op_getDeviceInfo.invoke(self, ((), context))

        def getDeviceInfoAsync(self, context=None):
            return _M_SmartHome.Thermostat._op_getDeviceInfo.invokeAsync(self, ((), context))

        def begin_getDeviceInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_getDeviceInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getDeviceInfo(self, _r):
            return _M_SmartHome.Thermostat._op_getDeviceInfo.end(self, _r)

        def turnOn(self, context=None):
            return _M_SmartHome.Thermostat._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_SmartHome.Thermostat._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_SmartHome.Thermostat._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_SmartHome.Thermostat._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_SmartHome.Thermostat._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_SmartHome.Thermostat._op_turnOff.end(self, _r)

        def getTemperature(self, context=None):
            return _M_SmartHome.Thermostat._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_SmartHome.Thermostat._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_SmartHome.Thermostat._op_getTemperature.end(self, _r)

        def increaseTemperature(self, context=None):
            return _M_SmartHome.Thermostat._op_increaseTemperature.invoke(self, ((), context))

        def increaseTemperatureAsync(self, context=None):
            return _M_SmartHome.Thermostat._op_increaseTemperature.invokeAsync(self, ((), context))

        def begin_increaseTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_increaseTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_increaseTemperature(self, _r):
            return _M_SmartHome.Thermostat._op_increaseTemperature.end(self, _r)

        def decreaseTemperature(self, context=None):
            return _M_SmartHome.Thermostat._op_decreaseTemperature.invoke(self, ((), context))

        def decreaseTemperatureAsync(self, context=None):
            return _M_SmartHome.Thermostat._op_decreaseTemperature.invokeAsync(self, ((), context))

        def begin_decreaseTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_decreaseTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_decreaseTemperature(self, _r):
            return _M_SmartHome.Thermostat._op_decreaseTemperature.end(self, _r)

        def getAirMoisture(self, context=None):
            return _M_SmartHome.Thermostat._op_getAirMoisture.invoke(self, ((), context))

        def getAirMoistureAsync(self, context=None):
            return _M_SmartHome.Thermostat._op_getAirMoisture.invokeAsync(self, ((), context))

        def begin_getAirMoisture(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_getAirMoisture.begin(self, ((), _response, _ex, _sent, context))

        def end_getAirMoisture(self, _r):
            return _M_SmartHome.Thermostat._op_getAirMoisture.end(self, _r)

        def increaseAirMoisture(self, context=None):
            return _M_SmartHome.Thermostat._op_increaseAirMoisture.invoke(self, ((), context))

        def increaseAirMoistureAsync(self, context=None):
            return _M_SmartHome.Thermostat._op_increaseAirMoisture.invokeAsync(self, ((), context))

        def begin_increaseAirMoisture(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_increaseAirMoisture.begin(self, ((), _response, _ex, _sent, context))

        def end_increaseAirMoisture(self, _r):
            return _M_SmartHome.Thermostat._op_increaseAirMoisture.end(self, _r)

        def decreaseAirMoisture(self, context=None):
            return _M_SmartHome.Thermostat._op_decreaseAirMoisture.invoke(self, ((), context))

        def decreaseAirMoistureAsync(self, context=None):
            return _M_SmartHome.Thermostat._op_decreaseAirMoisture.invokeAsync(self, ((), context))

        def begin_decreaseAirMoisture(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_decreaseAirMoisture.begin(self, ((), _response, _ex, _sent, context))

        def end_decreaseAirMoisture(self, _r):
            return _M_SmartHome.Thermostat._op_decreaseAirMoisture.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.ThermostatPrx.ice_checkedCast(proxy, '::SmartHome::Thermostat', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.ThermostatPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Thermostat'
    _M_SmartHome._t_ThermostatPrx = IcePy.defineProxy('::SmartHome::Thermostat', ThermostatPrx)

    _M_SmartHome.ThermostatPrx = ThermostatPrx
    del ThermostatPrx

    _M_SmartHome.Thermostat = Ice.createTempClass()
    class Thermostat(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Thermostat')

        def ice_id(self, current=None):
            return '::SmartHome::Thermostat'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Thermostat'

        def getDeviceInfo(self, current=None):
            raise NotImplementedError("servant method 'getDeviceInfo' not implemented")

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def increaseTemperature(self, current=None):
            raise NotImplementedError("servant method 'increaseTemperature' not implemented")

        def decreaseTemperature(self, current=None):
            raise NotImplementedError("servant method 'decreaseTemperature' not implemented")

        def getAirMoisture(self, current=None):
            raise NotImplementedError("servant method 'getAirMoisture' not implemented")

        def increaseAirMoisture(self, current=None):
            raise NotImplementedError("servant method 'increaseAirMoisture' not implemented")

        def decreaseAirMoisture(self, current=None):
            raise NotImplementedError("servant method 'decreaseAirMoisture' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ThermostatDisp)

        __repr__ = __str__

    _M_SmartHome._t_ThermostatDisp = IcePy.defineClass('::SmartHome::Thermostat', Thermostat, (), None, ())
    Thermostat._ice_type = _M_SmartHome._t_ThermostatDisp

    Thermostat._op_getDeviceInfo = IcePy.Operation('getDeviceInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_DeviceInfo, False, 0), ())
    Thermostat._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Thermostat._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Thermostat._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_Temperature, False, 0), (_M_SmartHome._t_DeviceTurnedOffError,))
    Thermostat._op_increaseTemperature = IcePy.Operation('increaseTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceTurnedOffError,))
    Thermostat._op_decreaseTemperature = IcePy.Operation('decreaseTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceTurnedOffError,))
    Thermostat._op_getAirMoisture = IcePy.Operation('getAirMoisture', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_AirMoisture, False, 0), (_M_SmartHome._t_DeviceTurnedOffError,))
    Thermostat._op_increaseAirMoisture = IcePy.Operation('increaseAirMoisture', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceTurnedOffError,))
    Thermostat._op_decreaseAirMoisture = IcePy.Operation('decreaseAirMoisture', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceTurnedOffError,))

    _M_SmartHome.Thermostat = Thermostat
    del Thermostat

if '_t_devices' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_devices = IcePy.defineSequence('::SmartHome::devices', (), IcePy._t_string)

_M_SmartHome._t_DeviceList = IcePy.defineValue('::SmartHome::DeviceList', Ice.Value, -1, (), False, True, None, ())

if 'DeviceListPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceListPrx = Ice.createTempClass()
    class DeviceListPrx(Ice.ObjectPrx):

        def getDevicesList(self, context=None):
            return _M_SmartHome.DeviceList._op_getDevicesList.invoke(self, ((), context))

        def getDevicesListAsync(self, context=None):
            return _M_SmartHome.DeviceList._op_getDevicesList.invokeAsync(self, ((), context))

        def begin_getDevicesList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.DeviceList._op_getDevicesList.begin(self, ((), _response, _ex, _sent, context))

        def end_getDevicesList(self, _r):
            return _M_SmartHome.DeviceList._op_getDevicesList.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DeviceListPrx.ice_checkedCast(proxy, '::SmartHome::DeviceList', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DeviceListPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::DeviceList'
    _M_SmartHome._t_DeviceListPrx = IcePy.defineProxy('::SmartHome::DeviceList', DeviceListPrx)

    _M_SmartHome.DeviceListPrx = DeviceListPrx
    del DeviceListPrx

    _M_SmartHome.DeviceList = Ice.createTempClass()
    class DeviceList(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::DeviceList')

        def ice_id(self, current=None):
            return '::SmartHome::DeviceList'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::DeviceList'

        def getDevicesList(self, current=None):
            raise NotImplementedError("servant method 'getDevicesList' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceListDisp)

        __repr__ = __str__

    _M_SmartHome._t_DeviceListDisp = IcePy.defineClass('::SmartHome::DeviceList', DeviceList, (), None, ())
    DeviceList._ice_type = _M_SmartHome._t_DeviceListDisp

    DeviceList._op_getDevicesList = IcePy.Operation('getDevicesList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_devices, False, 0), ())

    _M_SmartHome.DeviceList = DeviceList
    del DeviceList

# End of module SmartHome
